plot(effect, covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",  # Compared to...
cov.value2 = "negative",  # Reference group
xlab = "Effect of Positive Sentiment on Topic Prevalence")
labelTopics(model, n = 10)  # Show top 10 words per topic
########### Correlational analysis ############
theta <- model$theta
cor_matrix <- cor(theta, use = "pairwise.complete.obs")
library(corrplot)
corrplot(cor_matrix, method = "circle", type = "upper",
tl.col = "black", tl.cex = 0.8, number.cex = 0.7,
title = "Topic Correlations")
library(readr)
all_Public_reviews_sentiment <- read_csv("all_Public_reviews_sentiment_2.csv")
data <- all_Public_reviews_sentiment
data$sentiment_label <- as.factor(data$sentiment_label)
levels(data$sentiment_label)
# Preprocess text into document-term matrix format
processed <- textProcessor(documents = data$review_translated,
metadata = data,
lowercase = TRUE,
removestopwords = TRUE,
removenumbers = TRUE,
removepunctuation = TRUE,
wordLengths = c(3, Inf),
stem = FALSE)  # Disable stemming
data <- all_Public_reviews_sentiment
data$sentiment_label <- as.factor(data$sentiment_label)
levels(data$sentiment_label)
# Preprocess text into document-term matrix format
processed <- textProcessor(documents = data$review_translated,
metadata = data,
lowercase = TRUE,
removestopwords = TRUE,
removenumbers = TRUE,
removepunctuation = TRUE,
wordLengths = c(3, Inf),
stem = FALSE)  # Disable stemming
# Prepare documents and vocab
out <- prepDocuments(processed$documents, processed$vocab, processed$meta)
# Assign objects for modeling
docs <- out$documents
vocab <- out$vocab
meta <- out$meta
#Fit STM with Sentiment as a Binary Covariate
model <- stm(documents = docs,
vocab = vocab,
data = meta,
K = 12,  # You can change this number based on coherence
prevalence = ~ sentiment_label,
max.em.its = 75,
init.type = "Spectral")
effect <- estimateEffect(1:10 ~ sentiment_label, model, meta = meta)
# Plot how each topic differs between positive and negative reviews
plot(effect, covariate = "sentiment_label",
topics = 1:12,
model = model,
method = "difference",
cov.value1 = "positive",  # Compared to...
cov.value2 = "negative",  # Reference group
xlab = "Effect of Positive Sentiment on Topic Prevalence")
data <- all_Public_reviews_sentiment
data$sentiment_label <- as.factor(data$sentiment_label)
levels(data$sentiment_label)
# Preprocess text into document-term matrix format
processed <- textProcessor(documents = data$review_translated,
metadata = data,
lowercase = TRUE,
removestopwords = TRUE,
removenumbers = TRUE,
removepunctuation = TRUE,
wordLengths = c(3, Inf),
stem = FALSE)  # Disable stemming
# Prepare documents and vocab
out <- prepDocuments(processed$documents, processed$vocab, processed$meta)
# Assign objects for modeling
docs <- out$documents
vocab <- out$vocab
meta <- out$meta
#Fit STM with Sentiment as a Binary Covariate
model <- stm(documents = docs,
vocab = vocab,
data = meta,
K = 12,  # You can change this number based on coherence
prevalence = ~ sentiment_label,
max.em.its = 75,
init.type = "Spectral")
effect <- estimateEffect(1:12 ~ sentiment_label, model, meta = meta)
# Plot how each topic differs between positive and negative reviews
plot(effect, covariate = "sentiment_label",
topics = 1:12,
model = model,
method = "difference",
cov.value1 = "positive",  # Compared to...
cov.value2 = "negative",  # Reference group
xlab = "Effect of Positive Sentiment on Topic Prevalence")
labelTopics(model, n = 12)  # Show top 10 words per topic
########### Correlational analysis ############
theta <- model$theta
cor_matrix <- cor(theta, use = "pairwise.complete.obs")
library(corrplot)
corrplot(cor_matrix, method = "circle", type = "upper",
tl.col = "black", tl.cex = 0.8, number.cex = 0.7,
title = "Topic Correlations")
data <- all_Public_reviews_sentiment
data$sentiment_label <- as.factor(data$sentiment_label)
levels(data$sentiment_label)
# Preprocess text into document-term matrix format
processed <- textProcessor(documents = data$review_translated,
metadata = data,
lowercase = TRUE,
removestopwords = TRUE,
removenumbers = TRUE,
removepunctuation = TRUE,
wordLengths = c(3, Inf),
stem = FALSE)  # Disable stemming
# Prepare documents and vocab
out <- prepDocuments(processed$documents, processed$vocab, processed$meta)
# Assign objects for modeling
docs <- out$documents
vocab <- out$vocab
meta <- out$meta
#Fit STM with Sentiment as a Binary Covariate
model <- stm(documents = docs,
vocab = vocab,
data = meta,
K = 10,  # You can change this number based on coherence
prevalence = ~ sentiment_label,
max.em.its = 75,
init.type = "Spectral")
effect <- estimateEffect(1:10 ~ sentiment_label, model, meta = meta)
# Plot how each topic differs between positive and negative reviews
plot(effect, covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",  # Compared to...
cov.value2 = "negative",  # Reference group
xlab = "Effect of Positive Sentiment on Topic Prevalence")
labelTopics(model, n = 10)  # Show top 10 words per topic
########### Correlational analysis ############
theta <- model$theta
cor_matrix <- cor(theta, use = "pairwise.complete.obs")
library(corrplot)
corrplot(cor_matrix, method = "circle", type = "upper",
tl.col = "black", tl.cex = 0.8, number.cex = 0.7,
title = "Topic Correlations")
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
all_Public_reviews_sentiment <- read_csv("all_Public_reviews_sentiment_2.csv")
my_data<- all_Public_reviews_sentiment
# Count the frequency of each sentiment
sentiment_counts <- table(my_data$sentiment_label)
# Create pie chart
pie(sentiment_counts,
main = "Sentiment Distribution",
col = c("lightgreen", "salmon"),
labels = paste(names(sentiment_counts), "\n", sentiment_counts),
clockwise = TRUE)
all_Public_reviews_sentiment <- read_csv("all_Public_reviews_sentiment_2.csv")
my_data<- all_Public_reviews_sentiment
# Count the frequency of each sentiment
sentiment_counts <- table(my_data$sentiment_label)
# Calculate percentages
sentiment_percentages <- round(100 * sentiment_counts / sum(sentiment_counts), 1)
# Create labels with sentiment and percentage
labels <- paste(names(sentiment_counts), "-", sentiment_percentages, "%")
# Plot pie chart with percentages
pie(sentiment_counts,
main = "Sentiment Distribution",
col = c("lightgreen", "salmon"),
labels = labels,
clockwise = TRUE)
# Load packages
library(stm)
library(tm)
library(tidyverse)
library(textclean)
library(quanteda)
library(readr)
all_Public_reviews_sentiment <- read_csv("all_Public_reviews_sentiment_2.csv")
data <- all_Public_reviews_sentiment
data$sentiment_label <- as.factor(data$sentiment_label)
levels(data$sentiment_label)
# Preprocess text into document-term matrix format
processed <- textProcessor(documents = data$review_translated,
metadata = data,
lowercase = TRUE,
removestopwords = TRUE,
removenumbers = TRUE,
removepunctuation = TRUE,
wordLengths = c(3, Inf),
stem = FALSE)  # Disable stemming
# Prepare documents and vocab
out <- prepDocuments(processed$documents, processed$vocab, processed$meta)
# Assign objects for modeling
docs <- out$documents
vocab <- out$vocab
meta <- out$meta
#Fit STM with Sentiment as a Binary Covariate
model <- stm(documents = docs,
vocab = vocab,
data = meta,
K = 10,  # You can change this number based on coherence
prevalence = ~ sentiment_label,
max.em.its = 75,
init.type = "Spectral")
effect <- estimateEffect(1:10 ~ sentiment_label, model, meta = meta)
# Plot how each topic differs between positive and negative reviews
plot(effect, covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",  # Compared to...
cov.value2 = "negative",  # Reference group
xlab = "Effect of Positive Sentiment on Topic Prevalence")
labelTopics(model, n = 10)  # Show top 10 words per topic
# Set up PNG device with larger size and higher resolution
png("topic_modelling.png", width = 1200, height = 600, res = 150)
# Increase left margin to allow full topic labels to show
par(mar = c(5, 12, 4, 2))  # Bottom, Left, Top, Right
# Plot with custom margins
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence")
dev.off()
# Set up PNG device with larger size and higher resolution
png("topic_modelling.png", width = 1200, height = 1000, res = 150)
# Increase left margin to allow full topic labels to show
par(mar = c(5, 12, 4, 2))  # Bottom, Left, Top, Right
# Plot with custom margins
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence")
dev.off()
# Set up PNG device with larger size and higher resolution
png("topic_modelling.png", width = 1100, height = 1200, res = 150)
# Increase left margin to allow full topic labels to show
par(mar = c(5, 12, 4, 2))  # Bottom, Left, Top, Right
# Plot with custom margins
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence")
dev.off()
# Open graphics device
png("topic_modelling_simple.png", width = 1200, height = 600, res = 150)
# Increase margin for space
par(mar = c(5, 10, 4, 2))
# Create the plot without y-axis labels
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence",
labeltype = "custom",
custom.labels = paste0("Topic ", 1:10))  # <-- Simplified labels
dev.off()
# Define your custom topic labels
custom_labels <- c(
"Topic 1: Account Setup & Identification",
"Topic 2: Fraud & Security Concerns",
"Topic 3: Ease of Use & App Functionality",
"Topic 4: Login & App Technical Issues",
"Topic 5: Card Usage & Payments",
"Topic 6: Positive Sentiment & Satisfaction",
"Topic 7: PIdentity Verification & KYC Frustrations",
"Topic 8: Curreny Exchange & Crypto",
"Topic 9: Errors & Failed Attempts",
"Topic 10: Customer Support Problems"
)
# Plot with wider margins and custom labels
png("topic_modelling_labeled.png", width = 1400, height = 600, res = 150)
par(mar = c(5, 16, 4, 2))  # Add more left margin to fit long labels
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence",
labeltype = "custom",
custom.labels = custom_labels)
dev.off()
# Plot with wider margins and custom labels
png("topic_modelling_labeled.png", width = 1400, height = 800, res = 150)
par(mar = c(5, 16, 4, 2))  # Add more left margin to fit long labels
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence",
labeltype = "custom",
custom.labels = custom_labels)
dev.off()
# Plot with wider margins and custom labels
png("topic_modelling_labeled.png", width = 1000, height = 800, res = 150)
par(mar = c(5, 16, 4, 2))  # Add more left margin to fit long labels
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence",
labeltype = "custom",
custom.labels = custom_labels)
dev.off()
# Plot with wider margins and custom labels
png("topic_modelling_labeled.png", width = 1200, height = 800, res = 150)
par(mar = c(5, 16, 4, 2))  # Add more left margin to fit long labels
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence",
labeltype = "custom",
custom.labels = custom_labels)
dev.off()
# Plot with wider margins and custom labels
png("topic_modelling_labeled.png", width = 1400, height = 800, res = 150)
par(mar = c(5, 16, 4, 2))  # Add more left margin to fit long labels
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence",
labeltype = "custom",
custom.labels = custom_labels)
dev.off()
# Plot with wider margins and custom labels
png("topic_modelling_labeled.png", width = 1400, height = 900, res = 150)
par(mar = c(5, 16, 4, 2))  # Add more left margin to fit long labels
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence",
labeltype = "custom",
custom.labels = custom_labels)
dev.off()
library(stm)
library(ggplot2)
library(dplyr)
# Extract summary of effects
effect_df <- summary(effect,
covariate = "sentiment_label",
topics = 1:10,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative")$tables
# Convert list of topics to a dataframe
effect_df <- do.call(rbind, effect_df) %>%
as.data.frame() %>%
mutate(topic = factor(1:10))
# Plot with wider margins and custom labels
png("topic_modelling_labeled.png", width = 1600, height = 900, res = 150)
par(mar = c(5, 16, 4, 2))  # Add more left margin to fit long labels
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence",
labeltype = "custom",
custom.labels = custom_labels)
dev.off()
# Plot with wider margins and custom labels
png("topic_modelling_labeled.png", width = 2000, height = 900, res = 150)
par(mar = c(5, 16, 4, 2))  # Add more left margin to fit long labels
plot(effect,
covariate = "sentiment_label",
topics = 1:10,
model = model,
method = "difference",
cov.value1 = "positive",
cov.value2 = "negative",
xlab = "Effect of Positive Sentiment on Topic Prevalence",
labeltype = "custom",
custom.labels = custom_labels)
dev.off()
all_Public_reviews_sentiment <- read_csv("all_Public_reviews_sentiment_2.csv")
my_data<- all_Public_reviews_sentiment
# Count the frequency of each sentiment
sentiment_counts <- table(my_data$sentiment_label)
# Calculate percentages
sentiment_percentages <- round(100 * sentiment_counts / sum(sentiment_counts), 1)
# Create labels with sentiment and percentage
labels <- paste(names(sentiment_counts), "-", sentiment_percentages, "%")
# Plot pie chart with percentages
pie(sentiment_counts,
main = "Sentiment Distribution",
col = c("lightgreen", "salmon"),
labels = labels,
clockwise = TRUE)
install.packages("tm")          # Text mining tools
install.packages("wordcloud")   # Basic word cloud
View(data)
# Load packages
library(stm)
library(tm)
library(tidyverse)
library(textclean)
library(quanteda)
library(readr)
all_Public_reviews_sentiment <- read_csv("all_Public_reviews_sentiment_2.csv")
data <- all_Public_reviews_sentiment
data$sentiment_label <- as.factor(data$sentiment_label)
levels(data$sentiment_label)
# Preprocess text into document-term matrix format
processed <- textProcessor(documents = data$review_translated,
metadata = data,
lowercase = TRUE,
removestopwords = TRUE,
removenumbers = TRUE,
removepunctuation = TRUE,
wordLengths = c(3, Inf),
stem = FALSE)  # Disable stemming
# Prepare documents and vocab
out <- prepDocuments(processed$documents, processed$vocab, processed$meta)
# Assign objects for modeling
docs <- out$documents
vocab <- out$vocab
meta <- out$meta
#Fit STM with Sentiment as a Binary Covariate
model <- stm(documents = docs,
vocab = vocab,
data = meta,
K = 10,  # You can change this number based on coherence
prevalence = ~ sentiment_label,
max.em.its = 75,
init.type = "Spectral")
effect <- estimateEffect(1:10 ~ sentiment_label, model, meta = meta)
# Step 1: Extract the document-topic distribution matrix (θ matrix)
theta <- model$theta  # Rows = documents, Columns = topics
# Step 2: Calculate average topic proportions (mean over all documents)
topic_proportions <- colMeans(theta)  # Average over all documents
# Step 3: Add topic labels (optional)
topic_labels <- c(
"Account Setup & Identification",
"Fraud & Security Concerns",
"Ease of Use & App Functionality",
"Login & App Technical Issues",
"Card Usage & Payments",
"Positive Sentiment & Satisfaction",
"Identity Verification & KYC Frustrations",
"Errors & Failed Attempts",
"Currency Exchange & Crypto",
"Customer Support Problems"
)
# Step 4: Create a data frame with the topic proportions and labels
topic_df <- data.frame(
Topic = paste0("Topic ", 1:10),
Label = topic_labels,
Proportion = topic_proportions
)
# Step 5: Sort the topics by their average proportion (optional)
topic_df <- topic_df[order(-topic_df$Proportion), ]
# Step 6: Visualize the topic proportions using a bar plot
library(ggplot2)
ggplot(topic_df, aes(x = reorder(Label, Proportion), y = Proportion)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Average Topic Proportions Across All Reviews",
x = "Topic",
y = "Average Proportion"
) +
theme_minimal()
View(topic_df)
View(all_Public_reviews_sentiment)
View(all_Public_reviews_sentiment)
