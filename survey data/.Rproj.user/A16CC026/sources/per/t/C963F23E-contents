# Load Required Libraries
library(readr)
library(readxl)
library(dplyr)
library(forcats)
library(ggplot2)
library(stringr)
library(psych)

# Load and Clean Dataset
data <- read_csv("RScript_clean_dataCSV.csv")
data <- data %>% select(-starts_with("..."))

## MAIN REGRESSION

# Set Condition as Categorical
data$Condition <- factor(data$Condition, levels = c("Control", "Affect", "Norm"))

# Compute Binary Adoption Variable
data$Adopted <- ifelse(
  (data$Condition == "Control" & data$control_behvaiour == "Resistance") |
    (data$Condition == "Affect" & data$affect_behaviour == "Resistance") |
    (data$Condition == "Norm" & data$norm_behaviour == "Resistance"), 
  1, 0
  )

# Logistic Regression on Adoption
model <- glm(Adopted ~ Condition, data = data, family = "binomial")
summary(model)
exp(coef(model))

#number of adoptions : SUM
data %>%
  group_by(Condition) %>%
  summarise(
    Total = n(),
    Adopted = sum(Adopted, na.rm = TRUE)
  )

# Compute adoption percentage per condition
adoption_percentages <- data %>%
  filter(!is.na(Condition)) %>%  # Exclude missing condition entries
  group_by(Condition) %>%
  summarise(
    Total = n(),
    Adopted = sum(Adopted, na.rm = TRUE),
    Percent_Adopted = round(100 * mean(Adopted, na.rm = TRUE), 1)
  )

print(adoption_percentages)

#MANIPULATION CHECKS

# Manipulation Check: Affect
data$Affect_Score <- rowMeans(data[, c("Inspired_rank", "Determined_rank", "Enthusiastic_rank")], na.rm = TRUE)
aov_affect <- aov(Affect_Score ~ Condition, data = data)
summary(aov_affect)
TukeyHSD(aov_affect)

# Visualize Affect Score
affect_summary <- data %>%
  group_by(Condition) %>%
  summarise(Mean = mean(Affect_Score, na.rm = TRUE),
            SD = sd(Affect_Score, na.rm = TRUE),
            n = n(),
            SE = SD / sqrt(n))

ggplot(affect_summary, aes(x = Condition, y = Mean, fill = Condition)) +
  geom_bar(stat = "identity", width = 0.6, alpha = 0.8) +
  geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2, color = "black") +
  geom_text(aes(label = round(Mean, 2)), vjust = -0.5, size = 4) +
  labs(title = "Manipulation Check: Mean Affect Score by Condition", x = "Condition", y = "Mean Affect Score (1–5)") +
  scale_fill_manual(values = c("gray", "orange", "forestgreen")) +
  coord_cartesian(ylim = c(0, max(affect_summary$Mean + affect_summary$SD) + 0.5)) +
  theme_minimal()

# Manipulation Check: Norm
aov_norm <- aov(Resistance_norm_rank ~ Condition, data = data)
summary(aov_norm)
TukeyHSD(aov_norm)

norm_summary <- data %>%
  group_by(Condition) %>%
  summarise(Mean = mean(Resistance_norm_rank, na.rm = TRUE),
            SD = sd(Resistance_norm_rank, na.rm = TRUE),
            n = n(),
            SE = SD / sqrt(n))

ggplot(norm_summary, aes(x = Condition, y = Mean, fill = Condition)) +
  geom_bar(stat = "identity", width = 0.6, alpha = 0.8) +
  geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2, color = "black") +
  geom_text(aes(label = round(Mean, 2)), vjust = -0.5, size = 4) +
  labs(title = "Manipulation Check: Perceived Norm of Resistance Training", x = "Condition", y = "Mean Perception of Norm (1–5)") +
  scale_fill_manual(values = c("gray", "orange", "forestgreen")) +
  coord_cartesian(ylim = c(0, max(norm_summary$Mean + norm_summary$SD) + 0.5)) +
  theme_minimal()

## DIRECT EFFECTS

# Raw Adoption Rates by Condition
adoption_summary <- data %>%
  filter(!is.na(Adopted)) %>%  # Exclude NAs
  group_by(Condition) %>%
  summarise(
    Total = n(),
    Adopted = sum(Adopted),
    Percentage_Adopted = round(100 * mean(Adopted), 1)
  )

print(adoption_summary)

ggplot(adoption_summary, aes(x = Condition, y = Percentage_Adopted, fill = Condition)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(Percentage_Adopted, "%")), vjust = -0.5, size = 4) +
  scale_fill_manual(values = c("gray", "orange", "forestgreen")) +
  ylab("Adoption Rate (%)") +
  xlab("Condition") +
  ggtitle("Adoption of Resistance Training by Condition") +
  coord_cartesian(ylim = c(0, max(adoption_summary$Percentage_Adopted) + 10)) +
  theme_minimal()

## RELIABILITY CHECK

# Cronbach's Alpha 
affect_items <- data[, c("Inspired_rank", "Determined_rank", "Enthusiastic_rank")]
alpha_result <- alpha(affect_items)
print(alpha_result)
plot(alpha_result)

## RANDOMIZATION CHECK
chisq.test(table(data$Condition, data$Gym_member))
chisq.test(table(data$Condition, data$Erasmus_member))
chisq.test(table(data$Condition, data$activity_freq))
chisq.test(table(data$Condition, data$goal_category))
chisq.test(table(data$Condition, data$Age))


## DESCRIPTIVE STATISTICS
#AGE TENDENCY CHECK

# View the unique age groups
table(data$Age)

# To get percentages:
age_summary <- data %>%
  group_by(Age) %>%
  summarise(n = n()) %>%
  mutate(percentage = round(100 * n / sum(n), 1))

ggplot(age_summary, aes(x = Age, y = n)) +
  geom_bar(stat = "identity", fill = "lightcoral", color = "black") +
  geom_text(aes(label = paste0(n, " (", percentage, "%)")), vjust = -0.5, size = 4) +
  labs(title = "Distribution of Age Groups in Sample",
       x = "Age Group",
       y = "Number of Participants") +
  theme_minimal() +
  coord_cartesian(ylim = c(0, max(age_summary$n) + 10))
610

# COUNTRY DEMOGRAPHICS

country_summary <- data %>%
  group_by(Country) %>%
  summarise(n = n()) %>%
  mutate(percentage = round(100 * n / sum(n), 1)) %>%
  arrange(desc(n))

print(country_summary)

# Visualizing Demographics

ggplot(country_summary, aes(x = reorder(Country, -n), y = n)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(label = paste0(n, " (", percentage, "%)")),
            vjust = -0.1, 
            angle = 90,
            size = 3.5,
            color = "black") +
  labs(title = "Geographic Distribution of Participants",
       x = "Country",
       y = "Number of Participants") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  coord_cartesian(ylim = c(0, max(country_summary$n) + 25))

## MODERATING EFFECTS

# Convert moderators to factors
data$Erasmus_member <- as.factor(data$current_behaviour)
data$current_behaviour <- as.factor(data$current_behaviour)
data$gym_experience <- as.factor(data$gym_experience)
data$digital_experience <- as.factor(data$digital_experience)


# 1) Erasmus Sports Membership

#descriptive - how many people have a Erasmus sports membership
erasmus_summary <- data %>%
  group_by(`Erasmus_member`) %>%
  summarise(n = n()) %>%
  mutate(percentage = round(100 * n / sum(n), 1))

print(erasmus_summary)

ggplot(erasmus_summary, aes(x = `Erasmus_member`, y = n, fill = `Erasmus_member`)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(percentage, "%")), vjust = -0.5) +
  labs(title = "Erasmus Sports Membership Status",
       x = "Erasmus_member",
       y = "Number of Participants") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set3") +
  theme(legend.position = "none")

# moderating effect of membership

# Group by Condition and Erasmus Sports membership
data %>%
  filter(!is.na(`Erasmus_member`), !is.na(Condition)) %>%
  group_by(Condition, `Erasmus_member`) %>%
  summarise(
    Total = n(),
    Adopted = sum(Adopted, na.rm = TRUE),
    Percent_Adopted = round(100 * mean(Adopted, na.rm = TRUE), 1)
  ) %>%
  arrange(Condition)

# Recode Erasmus column to make sure it’s treated as factor
data$Erasmus_status <- as.factor(data$`Erasmus_member`)

# Plot adoption rate per condition, grouped by Erasmus membership
data %>%
  filter(!is.na(Erasmus_status), !is.na(Condition)) %>%
  group_by(Condition, Erasmus_status) %>%
  summarise(Percent_Adopted = round(100 * mean(Adopted, na.rm = TRUE), 1)) %>%
  ggplot(aes(x = Condition, y = Percent_Adopted, fill = Erasmus_status)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_text(aes(label = paste0(Percent_Adopted, "%")),
            position = position_dodge(width = 0.9), vjust = -0.5) +
  labs(title = "Adoption of Resistance Training by Condition and Erasmus Sports Membership",
       x = "Condition",
       y = "Adoption Rate (%)",
       fill = "Erasmus_member") +
  theme_minimal()

# 2) Current behaviour (Cardio/ Both)
model_current_behaviour <- glm(Adopted ~ Condition * current_behaviour, 
                               data = data, family = "binomial")

summary(model_current_behaviour)

# Group & summarize adoption by condition and current behaviour
current_behaviour_summary <- data %>%
  filter(!is.na(Adopted), !is.na(current_behaviour)) %>%
  group_by(Condition, current_behaviour) %>%
  summarise(
    Total = n(),
    Adopted = sum(Adopted),
    Percent_Adopted = round(100 * mean(Adopted), 1)
  ) %>%
  ungroup()

ggplot(current_behaviour_summary, aes(x = Condition, y = Percent_Adopted, fill = current_behaviour)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_text(aes(label = paste0(Percent_Adopted, "%")), 
            position = position_dodge(width = 0.9), vjust = -0.5, size = 4) +
  labs(
    title = "Adoption of Resistance Training by Condition and Current Training Type",
    x = "Condition",
    y = "Adoption Rate (%)",
    fill = "Current Training"
  ) +
  theme_minimal()

# 3) Gym Experience (Yes/No)
model_gym_experience <- glm(Adopted ~ Condition * gym_experience, 
                            data = data, family = "binomial")

summary(model_gym_experience)

# Group & summarize adoption by condition and gym experience
gym_experience_summary <- data %>%
  filter(!is.na(Adopted), !is.na(gym_experience)) %>%
  group_by(Condition, gym_experience) %>%
  summarise(
    Total = n(),
    Adopted = sum(Adopted),
    Percent_Adopted = round(100 * mean(Adopted), 1)
  ) %>%
  ungroup()

ggplot(gym_experience_summary, aes(x = Condition, y = Percent_Adopted, fill = gym_experience)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  geom_text(aes(label = paste0(Percent_Adopted, "%")), 
            position = position_dodge(width = 0.9), vjust = -0.5, size = 4) +
  labs(
    title = "Adoption of Resistance Training by Condition and Gym Experience",
    x = "Condition",
    y = "Adoption Rate (%)",
    fill = "Gym Experience"
  ) +
  theme_minimal()

# 4) Digital experience (yes/no)
exp_summary <- data %>% 
  count(digital_experience) %>% 
  mutate(percentage = round(100 * n / sum(n), 1))

print(exp_summary)

ggplot(exp_summary, aes(x = digital_experience, y = percentage, fill = digital_experience)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(percentage, "%")), vjust = -0.5, size = 4) +
  scale_fill_manual(values = c("Yes" = "steelblue", "No" = "tomato")) +
  labs(
    title = "Digital Experience in Sample",
    x = "Used a Digital Scenario Before?",
    y = "Percentage of Participants",
    fill = "Digital Experience"
  ) +
  ylim(0, 100) +
  theme_minimal()
